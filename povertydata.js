// Generated by CoffeeScript 1.10.0
(function() {
  var CountyData, StateData, callback, fs, path;

  fs = require('fs');

  path = 'est14_WA.txt';

  CountyData = (function() {
    function CountyData(childrenCount1, childrenPercentage1, medianIncome1, countyName1) {
      this.childrenCount = childrenCount1;
      this.childrenPercentage = childrenPercentage1;
      this.medianIncome = medianIncome1;
      this.countyName = countyName1;
    }

    return CountyData;

  })();

  StateData = (function() {
    var createAllCounties;

    function StateData(state, countyDataArray) {
      this.state = state;
      this.allCounties = createAllCounties(countyDataArray);
    }

    createAllCounties = function(countyDataArray) {
      var allCounties, childrenCount, childrenPercentage, county, countyData, countyName, i, len, medianIncome, ref;
      allCounties = [];
      ref = countyDataArray.slice(1, countyDataArray.length - 1);
      for (i = 0, len = ref.length; i < len; i++) {
        county = ref[i];
        childrenCount = county.slice(49, 57).trim();
        childrenPercentage = county.slice(76, 80).trim();
        medianIncome = county.slice(133, 139).trim();
        countyName = county.slice(193, 238).trim();
        countyData = new CountyData(childrenCount, childrenPercentage, medianIncome, countyName);
        allCounties.push(countyData);
      }
      return allCounties;
    };

    StateData.prototype.highestPercentage = function() {
      var county, i, len, max, maxCounty, percentageArr, ref;
      percentageArr = this.allCounties.map(function(county) {
        return county.childrenPercentage;
      });
      max = Math.max.apply(Math, percentageArr);
      ref = this.allCounties;
      for (i = 0, len = ref.length; i < len; i++) {
        county = ref[i];
        if (county.childrenPercentage === max.toString()) {
          maxCounty = county;
        }
      }
      return maxCounty;
    };

    StateData.prototype.lowestPercentage = function() {
      var county, i, len, min, minCounty, percentageArr, ref;
      percentageArr = this.allCounties.map(function(county) {
        return county.childrenPercentage;
      });
      min = Math.min.apply(Math, percentageArr);
      ref = this.allCounties;
      for (i = 0, len = ref.length; i < len; i++) {
        county = ref[i];
        if (county.childrenPercentage === min.toString()) {
          minCounty = county;
        }
      }
      return minCounty;
    };

    StateData.prototype.findCountyData = function(countyName) {
      var county, foundCounty, i, len, ref;
      ref = this.allCounties;
      for (i = 0, len = ref.length; i < len; i++) {
        county = ref[i];
        if (county.countyName === countyName) {
          foundCounty = county;
        }
      }
      if (foundCounty) {
        return foundCounty;
      } else {
        return "County not found";
      }
    };

    return StateData;

  })();

  fs.readFile(path, callback = function(err, data) {
    var countyData, stateData;
    if (err) {
      return console.log(err);
    } else {
      countyData = data.toString().split("\n");
      stateData = new StateData("WA", countyData);
      console.log(stateData.state);
      console.log(stateData.highestPercentage());
      console.log(stateData.lowestPercentage());
      console.log(stateData.findCountyData("King County"));
      return console.log(stateData.findCountyData("King"));
    }
  });

}).call(this);
